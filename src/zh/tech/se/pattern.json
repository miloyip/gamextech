{
  "nodes": [
    {
      "id": "Software Design Pattern",
      "link": "https://en.wikipedia.org/wiki/Software_design_pattern"
    },
    {
      "id": "Creational Pattern",
      "link": "https://en.wikipedia.org/wiki/Creational_pattern"
    },
    {
      "id": "Abstract Factory Pattern",
      "link": "https://en.wikipedia.org/wiki/Abstract_factory_pattern"
    },
    {
      "id": "Builder Pattern",
      "link": "https://en.wikipedia.org/wiki/Builder_pattern"
    },
    {
      "id": "Dependency Injection",
      "link": "https://en.wikipedia.org/wiki/Dependency_injection"
    },
    {
      "id": "Factory Method Pattern",
      "link": "https://en.wikipedia.org/wiki/Factory_method_pattern"
    },
    {
      "id": "Lazy Initialization",
      "link": "https://en.wikipedia.org/wiki/Lazy_initialization"
    },
    {
      "id": "Multiton Pattern",
      "link": "https://en.wikipedia.org/wiki/Multiton_pattern"
    },
    {
      "id": "Object Pool Pattern",
      "link": "https://en.wikipedia.org/wiki/Object_pool_pattern"
    },
    {
      "id": "Prototype Pattern",
      "link": "https://en.wikipedia.org/wiki/Prototype_pattern"
    },
    {
      "id": "Resource Acquisition Is Initialization",
      "abbr": "RAII",
      "link": "https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization"
    },
    {
      "id": "Singleton Pattern",
      "link": "https://en.wikipedia.org/wiki/Singleton_pattern"
    },
    {
      "id": "Structural Pattern",
      "link": "https://en.wikipedia.org/wiki/Structural_pattern"
    },
    {
      "id": "Adapter Pattern",
      "aka": "Wrapper Pattern",
      "link": "https://en.wikipedia.org/wiki/Adapter_pattern"
    },
    {
      "id": "Bridge Pattern",
      "link": "https://en.wikipedia.org/wiki/Bridge_pattern"
    },
    {
      "id": "Composite Pattern",
      "link": "https://en.wikipedia.org/wiki/Composite_pattern"
    },
    {
      "id": "Decorator Pattern",
      "link": "https://en.wikipedia.org/wiki/Decorator_pattern"
    },
    {
      "id": "Facade Pattern",
      "link": "https://en.wikipedia.org/wiki/Facade_pattern"
    },
    {
      "id": "Flyweight Pattern",
      "link": "https://en.wikipedia.org/wiki/Flyweight_pattern"
    },
    {
      "id": "Proxy Pattern",
      "link": "https://en.wikipedia.org/wiki/Proxy_pattern"
    },
    {
      "id": "Twin Pattern",
      "link": "https://en.wikipedia.org/wiki/Twin_pattern"
    },
    {
      "id": "Behavioral Pattern",
      "link": "https://en.wikipedia.org/wiki/Behavioral_pattern"
    },
    {
      "id": "Blackboard Pattern",
      "link": "https://en.wikipedia.org/wiki/Blackboard_(design_pattern)"
    },
    {
      "id": "Chain-of-responsibility Pattern",
      "link": "https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern"
    },
    {
      "id": "Command Pattern",
      "link": "https://en.wikipedia.org/wiki/Command_pattern"
    },
    {
      "id": "Interpreter Pattern",
      "link": "https://en.wikipedia.org/wiki/Interpreter_pattern"
    },
    {
      "id": "Iterator Pattern",
      "link": "https://en.wikipedia.org/wiki/Iterator_pattern"
    },
    {
      "id": "Mediator Pattern",
      "link": "https://en.wikipedia.org/wiki/Mediator_pattern"
    },
    {
      "id": "Memento Pattern",
      "link": "https://en.wikipedia.org/wiki/Memento_pattern"
    },
    {
      "id": "Null Object Pattern",
      "link": "https://en.wikipedia.org/wiki/Null_object_pattern"
    },
    {
      "id": "Observer Pattern",
      "link": "https://en.wikipedia.org/wiki/Observer_pattern"
    },
    {
      "id": "Servant Pattern",
      "link": "https://en.wikipedia.org/wiki/Servant_(design_pattern)"
    },
    {
      "id": "Specification Pattern",
      "link": "https://en.wikipedia.org/wiki/Specification_pattern"
    },
    {
      "id": "State Pattern",
      "link": "https://en.wikipedia.org/wiki/State_pattern"
    },
    {
      "id": "Strategy Pattern",
      "link": "https://en.wikipedia.org/wiki/Strategy_pattern"
    },
    {
      "id": "Template Method Pattern",
      "link": "https://en.wikipedia.org/wiki/Template_method_pattern"
    },
    {
      "id": "Visitor Pattern",
      "link": "https://en.wikipedia.org/wiki/Visitor_pattern"
    },
    {
      "id": "Concurrency Pattern",
      "link": "https://en.wikipedia.org/wiki/Concurrency_pattern"
    },
    {
      "id": "Immutable Object",
      "link": "https://en.wikipedia.org/wiki/Immutable_object"
    },
    {
      "id": "Proactor Pattern",
      "link": "https://en.wikipedia.org/wiki/Proactor_pattern"
    },
    {
      "id": "Reactor Pattern",
      "link": "https://en.wikipedia.org/wiki/Reactor_pattern"
    },
    {
      "id": "Thread Pool",
      "link": "https://en.wikipedia.org/wiki/Thread_pool"
    },
    {
      "id": "Architectural Pattern",
      "link": "https://en.wikipedia.org/wiki/Architectural_pattern"
    },
    {
      "id": "Entity Component System",
      "abbr": "ECS",
      "link": "https://en.wikipedia.org/wiki/Entity_component_system",
      "year": 2007
    },
    {
      "id": "Messaging Pattern",
      "link": "https://en.wikipedia.org/wiki/Messaging_pattern"
    },
    {
      "id": "Model-view-controller",
      "abbr": "MVC",
      "author": "Trygve Reenskaug",
      "link": "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",
      "year": 1979
    },
    {
      "id": "Model-view-presenter",
      "abbr": "MVP",
      "link": "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter",
      "year": 1990
    },
    {
      "id": "Model-view-viewmodel",
      "abbr": "MVVM",
      "author": [
        "Ken Cooper",
        "Ted Peters"
      ],
      "organization": "Microsoft",
      "link": "https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",
      "year": 2005
    },
    {
      "id": "Gang of Four Design Patterns",
      "abbr": "GOF",
      "author": [
        "Erich Gamma",
        "Richard Helm",
        "Ralph Johnson",
        "John Vlissides"
      ],
      "title": "Design Patterns: Elements of Reusable Object-Oriented Software",
      "year": 1994,
      "link": "https://en.wikipedia.org/wiki/Design_Patterns"
    },
    {
      "id": "Game Programming Patterns",
      "author": "Bob Nystrom",
      "link": "https://gameprogrammingpatterns.com/",
      "year": 2014
    },
    {
      "id": "Double Buffer Pattern",
      "link": "https://gameprogrammingpatterns.com/double-buffer.html"
    },
    {
      "id": "Game Loop Pattern",
      "link": "https://gameprogrammingpatterns.com/game-loop.html"
    },
    {
      "id": "Update Method Pattern",
      "link": "https://gameprogrammingpatterns.com/update-method.html"
    },
    {
      "id": "Bytecode Pattern",
      "link": "https://gameprogrammingpatterns.com/bytecode.html"
    },
    {
      "id": "Subclass Sandbox Pattern",
      "link": "https://gameprogrammingpatterns.com/subclass-sandbox.html"
    },
    {
      "id": "Type Object Pattern",
      "link": "https://gameprogrammingpatterns.com/type-object.html"
    },
    {
      "id": "Component Pattern",
      "link": "https://gameprogrammingpatterns.com/component.html"
    },
    {
      "id": "Event Queue Pattern",
      "link": "https://gameprogrammingpatterns.com/event-queue.html"
    },
    {
      "id": "Service Locator Pattern",
      "link": "https://gameprogrammingpatterns.com/service-locator.html"
    },
    {
      "id": "Data Locality Pattern",
      "link": "https://gameprogrammingpatterns.com/data-locality.html"
    },
    {
      "id": "Dirty Flag Pattern",
      "link": "https://gameprogrammingpatterns.com/dirty-flag.html"
    },
    {
      "id": "Spatial Partition Pattern",
      "link": "https://gameprogrammingpatterns.com/spatial-partition.html"
    }
  ],
  "links": [
    {
      "source": "Software Design",
      "target": "Software Design Pattern"
    },
    {
      "source": "Software Design Pattern",
      "target": "Creational Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Abstract Factory Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Builder Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Dependency Injection"
    },
    {
      "source": "Creational Pattern",
      "target": "Factory Method Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Lazy Initialization"
    },
    {
      "source": "Creational Pattern",
      "target": "Multiton Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Object Pool Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Prototype Pattern"
    },
    {
      "source": "Creational Pattern",
      "target": "Resource Acquisition Is Initialization"
    },
    {
      "source": "Creational Pattern",
      "target": "Singleton Pattern"
    },
    {
      "source": "Software Design Pattern",
      "target": "Structural Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Adapter Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Bridge Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Composite Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Decorator Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Facade Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Flyweight Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Proxy Pattern"
    },
    {
      "source": "Structural Pattern",
      "target": "Twin Pattern"
    },
    {
      "source": "Software Design Pattern",
      "target": "Behavioral Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Blackboard Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Chain-of-responsibility Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Command Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Interpreter Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Iterator Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Mediator Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Memento Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Null Object Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Observer Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Servant Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Specification Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "State Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Strategy Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Template Method Pattern"
    },
    {
      "source": "Behavioral Pattern",
      "target": "Visitor Pattern"
    },
    {
      "source": "Software Design Pattern",
      "target": "Concurrency Pattern"
    },
    {
      "source": "Concurrency Pattern",
      "target": "Immutable Object"
    },
    {
      "source": "Concurrency Pattern",
      "target": "Proactor Pattern"
    },
    {
      "source": "Concurrency Pattern",
      "target": "Reactor Pattern"
    },
    {
      "source": "Concurrency Pattern",
      "target": "Thread Pool"
    },
    {
      "source": "Software Design Pattern",
      "target": "Architectural Pattern"
    },
    {
      "source": "Architectural Pattern",
      "target": "Messaging Pattern"
    },
    {
      "source": "Architectural Pattern",
      "target": "Entity Component System"
    },
    {
      "source": "Architectural Pattern",
      "target": "Model-view-controller"
    },
    {
      "source": "Architectural Pattern",
      "target": "Model-view-presenter"
    },
    {
      "source": "Architectural Pattern",
      "target": "Model-view-viewmodel"
    },
    {
      "source": "Software Design Pattern",
      "target": "Gang of Four Design Patterns"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Abstract Factory Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Builder Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Factory Method Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Prototype Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Singleton Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Adapter Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Bridge Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Composite Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Decorator Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Facade Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Flyweight Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Proxy Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Chain-of-responsibility Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Command Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Interpreter Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Iterator Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Mediator Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Memento Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Observer Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "State Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Strategy Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Template Method Pattern"
    },
    {
      "source": "Gang of Four Design Patterns",
      "target": "Visitor Pattern"
    },
    {
      "source": "Software Design Pattern",
      "target": "Game Programming Patterns"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Command Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Flyweight Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Observer Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Singleton Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "State Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Double Buffer Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Game Loop Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Update Method Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Bytecode Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Subclass Sandbox Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Type Object Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Component Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Event Queue Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Service Locator Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Data Locality Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Dirty Flag Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Object Pool Pattern"
    },
    {
      "source": "Game Programming Patterns",
      "target": "Spatial Partition Pattern"
    }
  ]
}